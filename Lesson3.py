# # до ":" это ЗАГОЛОВОК, а часть после :(двоеточия) называется ТЕЛО

number = '123' \
         '456' \
         '789'
n = 't'


# необработанные строки
# f-стринг и r-стринг
text = r'\''
print(text) # необработанные строки, игнорирование экранирования

# многострочный комментарий может быть нне только с помощью одинарных ковычек (' '),но и с двойными (" ")
print(number[::-1])
print(number[::]) # слайз -( ???? срез типа)

name = 'Oleg'
age = 38
sum =  'Меня зовут %s, мне %s' % (name,age)
print (sum)
print (sum.upper().isupper())

#split - разделяет строку, принимает стрку , возвращает список , если не указать сепаратор - будет разделять по пробелом через
#join -  из списка делает стрку (на вход подаётся список) Return a list of the words in the string, using sep as the delimiter string.
# replace - замена  (что меняем,на что меняем, количество раз)
#strip - обжимать с Англ , метод используется для того чтобы обрезать
tex = 'text еще текст потом ещё'
#split
print(tex.split()) # ['text', 'еще', 'текст', 'потом', 'ещё']
#join
m_1 = tex.split()
print('.'.join(tex)) # t.e.x.t. .е.щ.е. .т.е.к.с.т. .п.о.т.о.м. .е.щ.ё  (можно передать стрку и '.' сепаратор)
print('.'.join(m_1)) # text.еще.текст.потом.ещё # объеденил по сепоратору массив
tex = 'text еще текст потом ещё'
# replace
print(tex.replace('text','текст', 1)) # текст еще текст потом ещё (заменили text )
#strip
tex = ' text еще текст потом ещё ' # добавили пробелы по краям
x = tex.rstrip()
print(x)
x = tex.lstrip()
print(x)

#Псевдокод - инструкции которые который будут иммитировать другой язык, т.к. это неформальный язык который не имеет
# синтексических правил и не предназначен для компиляции, но будет понятен

#==============================================================================================
#1 проектироваение  (псевдокод)
#2 протетипирование (блок схемы к примеры)
#3 основной каркас - программирование
# овал - начало,конец
# парралелограм - входные данные
# прямоугольник - программа
# ромб - условия
# потоки - отображаются с помощью стрелочек

# последовательность символов в строке - э то строковый литерал (в питоне литералы должны быть в кавычках "" или '')
#startswith() - проверяет начинается ли строка с 'параметр'
#endswith() - проверяет заканчивается ли строка с 'параметр'
tex = 'text еще текст потом ещё'
print(tex.strip().startswith('text')) #True
print(tex.strip().endswith('ещё')) #True

#partition - метод разбиение  на 3 части до разделителя ('text'), сам разделитель, после разделителя (на выходе кортедж)
print(tex.partition('text')) # ('text еще ', 'текст', ' потом ещё')
print(tex.rjust(40))
print(tex.ljust(40,'*'))
print(tex.center(40,'*'))

# ТИП ПРЕОБРАЗОВАНИЯ
#%d 10ная системя счистления
#%s
#%e 16 -ая
#%o -восьмеричная система
#%f - число с плавающей точкой
import pyperclip as pyperclip

# tex = ' text text %o потом ещё '
# gen = tex % 8
# print(gen) # text text 10 потом ещё
# # добавит в строку 8-го типа 8 = это 10 для восьмиричной системы

#==================
#.format() метод подстановки

tex = ' text {} еще text %o потом ещё '
gen = tex % 3
print(gen.format('Denis')) # {} - позволяет подставлять вместо скобочек

# начиная с версии 3.8 f-строки можно выводить не только строки но и их имена (можно круто дэбажить строки)
print(f'{gen=}')      # не разобрался !!!!!!!!!!
print(f'{gen= :>1}')  # не разобрался !!!!!!!!!!
#ctrl+c или ctrl+v = обращение к буферу обмена, Обращение к памяти

#===========
import pyperclip
print(pyperclip.paste()) # копирование с буфер обмена с операционной системы

# ДЗ
#- оператор if else
#- калькулятор

# число 0 - False
# репликация - умножение строк
# метод слайз - обрезание строк (срезы)
# Типы данных инт, флоут, булев, set(множества), комплексные,
# множество - список объектов
# continious - интерпретатор продолжает выполнение функции
# фунция enumerate (когда пронумеровывает по индексам)
# Pyton несёт коцепцию минимизацию циклов while и увеличение циклов for
#split - разделяет б принимает строку и разделяет на множество
#join - объединяет множества в строку
#replace - заменяет один элемент строки на другой
#strip - обрезает страку
#r.strip
# #l.strip
#find - находит нужный элемент , возвращает индекс элемента (передаём слово, возвратит индекс)
#startwith #endtwith - ищет и возвращает булево значение True / False (сначала/ с конеца)
